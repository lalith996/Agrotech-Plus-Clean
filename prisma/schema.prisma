generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  role               UserRole            @default(CUSTOMER)
  city               String?
  registrationNumber String?
  passwordHash       String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accounts           Account[]
  sessions           Session[]
  customer           Customer?
  farmer             Farmer?
  files              File[]
  notifications      NotificationLog[]
  performanceMetrics PerformanceMetric[]
  searchQueries      SearchQuery[]
  preferences        UserPreference?

  @@index([role, city])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id            String         @id @default(cuid())
  userId        String         @unique
  phone         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  addresses     Address[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[]
  subscriptions Subscription[]

  @@map("customers")
}

model Farmer {
  id             String           @id @default(cuid())
  userId         String           @unique
  farmName       String
  location       String
  description    String?
  phone          String?
  isApproved     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  certifications Certification[]
  deliveries     FarmerDelivery[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  products       Product[]
  qcResults      QCResult[]

  @@index([isApproved])
  @@map("farmers")
}

model Address {
  id         String   @id @default(cuid())
  customerId String
  name       String
  street     String
  city       String
  state      String
  zipCode    String
  isDefault  Boolean  @default(false)
  latitude   Float?
  longitude  Float?
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orders     Order[]

  @@map("addresses")
}

model Product {
  id                String             @id @default(cuid())
  name              String
  category          String
  description       String?
  images            String[]
  basePrice         Float
  unit              String
  isActive          Boolean            @default(true)
  farmerId          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  orderItems        OrderItem[]
  farmer            Farmer             @relation(fields: [farmerId], references: [id], onDelete: Cascade)
  qcResults         QCResult[]
  subscriptionItems SubscriptionItem[]

  @@map("products")
}

model Subscription {
  id           String             @id @default(cuid())
  customerId   String
  deliveryZone String
  deliveryDay  String
  status       SubscriptionStatus @default(ACTIVE)
  startDate    DateTime
  pausedUntil  DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  orders       Order[]
  items        SubscriptionItem[]
  customer     Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model SubscriptionItem {
  id             String       @id @default(cuid())
  subscriptionId String
  productId      String
  quantity       Float
  frequency      String       @default("weekly")
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, productId])
  @@map("subscription_items")
}

model Order {
  id             String          @id @default(cuid())
  customerId     String
  subscriptionId String?
  addressId      String
  deliverySlot   String
  status         OrderStatus     @default(PENDING)
  totalAmount    Float
  deliveryDate   DateTime
  specialNotes   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  items          OrderItem[]
  address        Address         @relation(fields: [addressId], references: [id])
  customer       Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  subscription   Subscription?   @relation(fields: [subscriptionId], references: [id])
  routeOrders    RouteOrder[]
  routes         DeliveryRoute[] @relation("RouteOrders")

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Float
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model FarmerDelivery {
  id           String     @id @default(cuid())
  farmerId     String
  deliveryDate DateTime
  status       String     @default("scheduled")
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  farmer       Farmer     @relation(fields: [farmerId], references: [id], onDelete: Cascade)
  qcResults    QCResult[]

  @@map("farmer_deliveries")
}

model QCResult {
  id               String         @id @default(cuid())
  farmerDeliveryId String
  productId        String
  farmerId         String
  expectedQuantity Float
  acceptedQuantity Float
  rejectedQuantity Float
  rejectionReasons String[]
  photos           String[]
  inspectorId      String
  notes            String?
  timestamp        DateTime       @default(now())
  farmerDelivery   FarmerDelivery @relation(fields: [farmerDeliveryId], references: [id], onDelete: Cascade)
  farmer           Farmer         @relation(fields: [farmerId], references: [id], onDelete: Cascade)
  product          Product        @relation(fields: [productId], references: [id])

  @@map("qc_results")
}

model DeliveryZone {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  isActive    Boolean        @default(true)
  boundaries  Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  slots       DeliverySlot[]

  @@map("delivery_zones")
}

model DeliverySlot {
  id        String          @id @default(cuid())
  zoneId    String
  dayOfWeek Int
  startTime String
  endTime   String
  maxOrders Int             @default(50)
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  routes    DeliveryRoute[]
  zone      DeliveryZone    @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@unique([zoneId, dayOfWeek, startTime])
  @@map("delivery_slots")
}

model RouteOrder {
  id       String        @id @default(cuid())
  routeId  String
  orderId  String
  sequence Int
  order    Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  route    DeliveryRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@unique([routeId, orderId])
  @@map("route_orders")
}

model File {
  id            String         @id @default(cuid())
  originalName  String
  mimeType      String
  size          Int
  s3Key         String         @unique
  url           String         @unique
  optimizedUrl  String?
  thumbnailUrl  String?
  uploadedBy    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  certification Certification?
  user          User           @relation(fields: [uploadedBy], references: [id])

  @@index([uploadedBy])
  @@map("files")
}

model SearchQuery {
  id        String   @id @default(cuid())
  query     String
  userId    String?
  filters   Json?
  results   Int
  clicked   Boolean  @default(false)
  clickedId String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([query])
  @@index([userId])
  @@map("search_queries")
}

model PerformanceMetric {
  id        String   @id @default(cuid())
  endpoint  String
  method    String
  duration  Int
  status    Int
  userId    String?
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([endpoint, method])
  @@index([createdAt])
  @@map("performance_metrics")
}

model UserPreference {
  id                   String   @id @default(cuid())
  userId               String   @unique
  favoriteCategories   String[]
  preferredFarms       String[]
  dietaryRestrictions  String[]
  maxDeliveryDistance  Float?
  priceRange           Json?
  notificationSettings Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model QCOfflineEntry {
  id               String    @id @default(cuid())
  deviceId         String
  farmerDeliveryId String
  productId        String
  farmerId         String
  expectedQuantity Float
  acceptedQuantity Float
  rejectedQuantity Float
  rejectionReasons String[]
  photos           String[]
  audioNotes       String[]
  inspectorId      String
  notes            String?
  geolocation      Json?
  signature        String?
  synced           Boolean   @default(false)
  syncedAt         DateTime?
  syncError        String?
  timestamp        DateTime  @default(now())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([deviceId, synced])
  @@index([farmerDeliveryId])
  @@map("qc_offline_entries")
}

model RouteOptimization {
  id                String        @id @default(cuid())
  routeId           String        @unique
  algorithm         String
  parameters        Json
  originalDistance  Float
  optimizedDistance Float
  originalDuration  Int
  optimizedDuration Int
  savings           Float
  createdAt         DateTime      @default(now())
  route             DeliveryRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@map("route_optimizations")
}

model NotificationLog {
  id        String    @id @default(cuid())
  userId    String
  type      String
  channel   String
  title     String
  message   String
  data      Json?
  sent      Boolean   @default(false)
  sentAt    DateTime?
  error     String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId, type])
  @@index([sent, createdAt])
  @@map("notification_logs")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@map("system_configs")
}

model Certification {
  id            String    @id @default(cuid())
  farmerId      String
  name          String
  issuingBody   String
  issueDate     DateTime
  expiryDate    DateTime?
  fileId        String    @unique
  extractedText String?
  isValidated   Boolean   @default(false)
  validatedBy   String?
  validatedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  farmer        Farmer    @relation(fields: [farmerId], references: [id], onDelete: Cascade)
  file          File      @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([farmerId])
  @@map("certifications")
}

model DeliveryRoute {
  id                String             @id @default(cuid())
  slotId            String
  driverId          String?
  date              DateTime
  status            String             @default("planned")
  optimizedOrder    String[]
  estimatedDuration Int?
  actualDuration    Int?
  notes             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  slot              DeliverySlot       @relation(fields: [slotId], references: [id], onDelete: Cascade)
  optimization      RouteOptimization?
  routeOrders       RouteOrder[]
  orders            Order[]            @relation("RouteOrders")

  @@map("delivery_routes")
}

model EmailRegistry {
  id        String   @id @default(cuid())
  city      String
  role      UserRole
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([city, role])
  @@map("email_registry")
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

enum UserRole {
  CUSTOMER
  FARMER
  OPERATIONS
  DRIVER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PICKED
  ORDER_IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
}

enum LotStatus {
  PLANTED
  GROWING
  HARVESTED
  PACKAGED
  SHIPPED
}

enum DeliveryStatus {
  SCHEDULED
  PICKED_UP
  DELIVERY_IN_TRANSIT
  DELIVERED
  FAILED
}
